--------------------------------------------------------------------------------
Psiphon 3 Circumvention System INSTALL
--------------------------------------------------------------------------------


Contents
--------------------------------------------------------------------------------

Overview
Build/Deploy Host Installation
Debian Server Host Installation
Network Database Configuration


Overview
--------------------------------------------------------------------------------

A Psiphon 3 system consists of:

- A database of network assets. Currently, this is stored in spreadsheet form
in Data/psi_db.xls.

- A number of server hosts. A host consists of one or more servers. In our
terminology, a server is a single instance of the server software behind a
single IP address.

- A set of client builds.

- A build/deploy host.

The build/deploy host is set up manually. Part of each server host setup is also
performed manually. The build script is used to create client executables on
the build/deploy host and from the same host a deploy script completes the
server hosts installs or updates server hosts with new information.


Build/Deploy Host Installation
--------------------------------------------------------------------------------

Dependencies
------------

- Windows XP/Vista/7
- Microsoft Visual Studio Express 10 (SP1)
- Microsoft Platform SDK
- Python 2.7.x and modules

TODO: Mercurial client and clone instructions?

1. Python setup
---------------

- Download and install the laatest Python 2.7.x (ensure you choose x86, not x86-64):

  http://www.python.org/downloads/

- When running the installer, in the "Customize Python" ensure that the option to install pip is also selected (this is default)
 - Although not required, it is recommended to also ensure the option to "add python to the system path" is also selected

- Before attempting to install the additional modules:
 - Install OpenSSL development libraries.
  - On Windows, they can be found here: http://slproweb.com/products/Win32OpenSSL.html
  - Be sure to install the corresponding Visual C++ Redistributable package as well (making sure to match 32 or 64 bit versions with the OpenSSL installed in the previous step)
 - Install swig
  - On Windows, it can be found here: http://www.swig.org/download.html
  - Unzip the directory to a well known location
  - Be sure to add the unzipped directory to your PATH
 - Install the Microsoft Visual C++ Compiler for Python 2.7 from: http://aka.ms/vcpython27


- Some modules cannot be installed by pip on Windows due to their correct packages not being available in pypi, and 32/64 bit incompatibilities. These include:
 - M2Crypto: Download from http://chandlerproject.org/Projects/MeTooCrypto#Downloads
  - Take care to install the latest version for python 2.7 and Win32 (64 bit versions will not work)
 - pycurl: Download from http://pycurl.sourceforge.net/
  - Take care to install the latest version for python 2.7 and Win32 (64 bit versions will not work)
 - pywin32 - Download from http://sourceforge.net/projects/pywin32/files
  - Take care to install the latest version for python 2.7 and Win32 (64 bit versions will not work)

 - Install additional modules by running the following from a command propmt:

  pip install paramiko pyOpenSSL jsonpickle PyYAML qrcode requests apache-libcloud boto cogapp twitter

2. Windows Client Build Setup
-----------------------------

- Install Microsoft Visual Studio 10 (+SP1)

  https://visualstudio.com/en-us/products/visual-studio-express-vs.aspx

 - Downloading any but the latest version requires a (free) Microsoft account
 - SP1 can be found here: https://www.microsoft.com/en-ca/download/details.aspx?id=23691

- Install Windows Platform SDK

  http://msdn.microsoft.com/en-us/windows/bb980924

- Authenticode code signing setup

Psiphon includes support for authenticode signing of the client builds. Code
signing is performed by the automated build script using keys found in the
Data/CodeSigning subdirectory of the source tree. The included keys are for
test purposes only. For production use, obtain a code signing certificate from
a commercial CA.

To manually test the individual code signing commands:

- Create a new test signing key:
"<Path to SDK>\Bin\makecert.exe" -r -sv key.pvk -n "CN=MyCN" cert.spc
"<Path to SDK>\Bin\pvk2pfx.exe" -pvk key.pvk -spc cert.spc -pfx MyPFX.pfx

- Sign an executable:
"<Path to SDK>\Bin\signtool.exe" sign /f MyPFX.pfx psiphon.exe

- Review tool paths in Automation/psi_build.py and adjust if required.


3. Android Client Build Setup
-----------------------------

[TODO]


4. Server Install
-----------------

See the section below on Debian Server Host Installation.


5. Client Build
---------------

- Invoke the build script

  cd Automation
  python psi_build.py

Outputs are in Automation/Builds. There is one client per Sponsor ID and
Client ID. For more information on these values, see the design paper and see
the section below on configuring the network database.

If building new clients, invoke the deploy script to upload the builds to the
hosts in your network database for automatic client upgrade.

- Invoke the deploy script

  cd Automation
  python psi_deploy.py


TODO: document full automation
- NOTE: the Linode automation script requires an Administrator shell


Debian Server Host Installation
--------------------------------------------------------------------------------

Dependencies
------------

- Debian 6.0 (squeeze)
- Openswan 2.6.30 source code with KLIPS kernel module
- xl2tp 1.2.6
- Python 2.7.x and modules


1. Configure SSH, firewall and IP forwarding
--------------------------------------------

Update the SSH configuration to bind to only one IP address and to use port 2222
(or another port of your choice, but pay attention to the firewall rules below).
Configure it so that only root may login through SSH.

Modify /etc/ssh/sshd_config:

  Port 2222
  ListenAddress x.x.x.x
  ...
  AllowUsers root
  ...

Restart ssh:

  /etc/init.d/ssh restart

Create /etc/iptables.rules:

*filter
  -A INPUT -i lo -j ACCEPT
  -A INPUT -d 127.0.0.0/8 ! -i lo -j REJECT --reject-with icmp-port-unreachable
  -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 465 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 587 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 993 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 995 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 2222 -j ACCEPT
  -A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
  -A INPUT -p esp -j ACCEPT
  -A INPUT -p ah -j ACCEPT
  -A INPUT -p udp --dport 500 -j ACCEPT
  -A INPUT -p udp --dport 4500 -j ACCEPT
  -A INPUT -i ipsec+ -p udp -m udp --dport l2tp -j ACCEPT
  -A INPUT -j REJECT --reject-with icmp-port-unreachable
  -A FORWARD -s 10.0.0.0/8 -p tcp -m multiport --dports 80,443,554,1935,7070,8000,8001,6971:6999 -j ACCEPT
  -A FORWARD -s 10.0.0.0/8 -p udp -m multiport --dports 80,443,554,1935,7070,8000,8001,6971:6999 -j ACCEPT
  -A FORWARD -s 10.0.0.0/8 -d 8.8.8.8 -p tcp --dport 53 -j ACCEPT
  -A FORWARD -s 10.0.0.0/8 -d 8.8.8.8 -p udp --dport 53 -j ACCEPT
  -A FORWARD -s 10.0.0.0/8 -d 8.8.4.4 -p tcp --dport 53 -j ACCEPT
  -A FORWARD -s 10.0.0.0/8 -d 8.8.4.4 -p udp --dport 53 -j ACCEPT
  -A FORWARD -s 10.0.0.0/8 -d 10.0.0.0/8 -j DROP
  -A FORWARD -s 10.0.0.0/8 -j DROP
  -A OUTPUT -p tcp -m multiport --dports 53,80,443,554,1935,7070,8000,8001,6971:6999 -j ACCEPT
  -A OUTPUT -p udp -m multiport --dports 53,80,443,554,1935,7070,8000,8001,6971:6999 -j ACCEPT
  -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 22 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 80 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 465 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 587 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 993 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 995 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 2222 -j ACCEPT
  -A OUTPUT -p tcp -m tcp --sport 8080 -j ACCEPT
  -A OUTPUT -p esp -j ACCEPT
  -A OUTPUT -p ah -j ACCEPT
  -A OUTPUT -p udp --sport 500 -j ACCEPT
  -A OUTPUT -p udp --sport 4500 -j ACCEPT
  -A OUTPUT -o ipsec+ -p udp -m udp --dport l2tp -j ACCEPT
  -A OUTPUT -j DROP
COMMIT

*nat
  -A PREROUTING -i eth+ -p tcp --dport 443 -j DNAT --to-destination :8080
  -A POSTROUTING -s 10.0.0.0/8 -o eth+ -j MASQUERADE
COMMIT

Create /etc/network/if-up.d/firewall (chmod +x):

  #!/bin/sh

  iptables-restore < /etc/iptables.rules

Add to or uncomment in /etc/sysctl.conf:

  net.ipv4.ip_forward=1

Enable the firewall and IP forwarding:

  /etc/network/if-up.d/firewall
  /etc/init.d/procps start


2. Install xinetd, wondershaper, fail2ban, ntp
-------------------------------------------------------

apt-get update
apt-get upgrade
apt-get dist-upgrade
apt-get install -y xinetd wondershaper fail2ban ntp

As management SSH access is open to any source IP address, we recommend
installing fail2ban to defend against brute-force SSH login attempts.

Create or edit /etc/fail2ban/jail.local:

  [ssh]
  port    = ssh,80,465,587,993,995,2222

  [ssh-ddos]
  port    = ssh,80,465,587,993,995,2222

Edit /etc/fail2ban/filter.d/sshd.conf, and add the following line to the failregex list:

  ^%(__prefix_line)spam_unix\(sshd:auth\): authentication failure; logname=\S* uid=\S* euid=\S* tty=\S* ruser=\S* rhost=<HOST>(?:\s+user=.*)?\s*$


3. Install obfuscated ssh
-------------------------

apt-get install libpam0g-dev
wget https://github.com/brl/obfuscated-openssh/zipball/master -O ossh.zip
unzip ossh.zip
cd brl-obfuscated-openssh-ca93a2c
./configure --with-pam
make
make install


4. Install and configure sudo
-----------------------------

apt-get update
apt-get install sudo
visudo

Add the following line under "User privilege specification" below the root entry:
  www-data ALL=NOPASSWD: /usr/local/sbin/ipsec auto --rereadsecrets
Confirm that the path to ipsec is correct.


5. Get xl2tp, and python packages
---------------------------------

apt-get update
apt-get install -y xl2tpd
apt-get install -y python-setuptools python-dev build-essential
easy_install cherrypy webob xlrd portalocker netifaces jsonpickle

Patch cherrypy (/usr/local/lib/python2.6/dist-packages/CherryPy-3.2.0-py2.6.egg/cherrypy/wsgiserver/ssl_builtin.py):

    def wrap(self, sock):
        """Wrap and return the given socket, plus WSGI environ entries."""
        try:
            s = ssl.wrap_socket(sock, do_handshake_on_connect=True,
                    server_side=True, certfile=self.certificate,
                    keyfile=self.private_key, ssl_version=ssl.PROTOCOL_SSLv23)
        except ssl.SSLError, e:
            if e.errno == ssl.SSL_ERROR_EOF:
                # This is almost certainly due to the cherrypy engine
                # 'pinging' the socket to assert it's connectable;
                # the 'ping' isn't SSL.
                return None, {}
            elif e.errno == ssl.SSL_ERROR_SSL:
                if e.args[1].endswith('http request'):
                    # The client is speaking HTTP to an HTTPS server.
                    raise wsgiserver.NoSSLError
            raise
+        environ = self.get_environ(s)
+        if environ:
+            return s, environ
+        else:
+            return None, {}
-        return s, self.get_environ(s)

    # TODO: fill this out more with mod ssl env
    def get_environ(self, sock):
        """Create WSGI environ entries to be merged into each request."""
        cipher = sock.cipher()
+        if not cipher:
+            return None
        ssl_environ = {
            "wsgi.url_scheme": "https",
            "HTTPS": "on",
            'SSL_PROTOCOL': cipher[1],
            'SSL_CIPHER': cipher[0]
##            SSL_VERSION_INTERFACE     string  The mod_ssl program version
##            SSL_VERSION_LIBRARY       string  The OpenSSL program version
            }
        return ssl_environ


6. Get, patch and install Openswan and the KLIPS kernel module
--------------------------------------------------------------

NOTE: We're using KLIPS in place of NETKEY as only KLIPS passed both tests:
- Multiple clients behind the same NAT can connect
- Multiple clients behind different NATs with the same local IP can connect

NOTE2: We're compiling from source and backporting the following commit:
  http://git.openswan.org/cgi-bin/gitweb.cgi?p=openswan.git/.git;a=commit;h=b19ed5a79d0957fb50ac939559860d287cf762da
This is because it seems that versions that include this change have regressed to
not work well with multiple interfaces with names like ethx:y
We have to do this because we have multiple IP addresses per host.
The first patch described below allows more than 2 IP addresses per host.
The second patch described below allows more than 10 IP addresses per host.

NOTE3: For Linode, follow these steps to use the kernel supplied by the linux distribution:
  http://library.linode.com/linode-platform/custom-instances/pv-grub-howto#sph_debian-6-squeeze
Also install linux-headers-2.6-xen-686


apt-get install -y bison flex libgmp3-dev
wget http://openswan.org/download/openswan-2.6.30.tar.gz
tar zxvf openswan-2.6.30.tar.gz
cd openswan-2.6.30

  (See: http://comments.gmane.org/gmane.network.openswan.user/15675)

Note: The following code changes can be skipped if the server only has one
host (i.e., only has one IP address).

Edit linux/include/openswan/ipsec_param.h:
  Set IPSEC_NUM_IF 20 or however number of interfaces are needed

  (See: http://git.openswan.org/cgi-bin/gitweb.cgi?p=openswan.git/.git;a=commitdiff;h=b19ed5a79d0957fb50ac939559860d287cf762da)

Edit lib/libipsecconf/virtif.c:
  Change the function valid_str() to the following:
    static int valid_str(const char * const str, unsigned int * const pn, char ** const pphys)
    {
        char *pequal = NULL;
        char *pnum_start = NULL;
        char numeric[5] = {'\0'};
        char ch = '\0';
        unsigned int i = 0;
        if (!str) return 0;
        if (strlen(str)<8) return 0;

        /* Check if the string has an = sign */
        pequal = strchr(str,'=');
        if (!pequal) return 0;

        /* Where does the device number start ? */
        pnum_start = strstr(str,"ipsec");
        if (!pnum_start) {
            pnum_start = strstr(str,"mast");
            if (!pnum_start) return 0;
            else pnum_start += (sizeof("mast") - 1);
        }
        else pnum_start += (sizeof("ipsec") - 1);

        /* Is there a device number ? */
        if (pequal == pnum_start) return 0;

        /* Is there enough room to store the device number ? */
        if ((pequal - pnum_start) >= sizeof(numeric)) return 0;

        /* Copy only digit characters */
        while ( '=' != (ch = pnum_start[i]) ) {
            if (ch < '0' || ch > '9') return 0;
            numeric[i++] = ch;
        }

        if (pn) *pn = atoi(numeric);
        if (pphys) *pphys = pequal + 1;
        return 1;
    }

Edit programs/_startklips/_startklips.in:
  Apply the following diff:
    -       $devprefix[0-9])        ;;
    +       $devprefix[0-9]*)       ;;

make programs install
make KERNELSRC=/lib/modules/`uname -r`/build module minstall

  Edit /etc/init.d/ipsec: set Default-Start: 2 3 4 5
update-rc.d ipsec defaults
reboot


7. Configure GeoIP lookup
-------------------------

cd /root

wget http://geolite.maxmind.com/download/geoip/api/c/GeoIP.tar.gz
tar xvf GeoIP.tar.gz
cd GeoIP-1.4.8
# [apt-get install zlib1g-dev]
./configure
make
make check
make install

[TODO: check again for latest-version Python download URL]

cd ..
wget http://geolite.maxmind.com/download/geoip/api/python/GeoIP-Python-1.2.7.tar.gz
tar xvf GeoIP-Python-1.2.7.tar.gz
cd GeoIP-Python-1.2.7
# [apt-get install gcc]
# [apt-get install python-dev]
python setup.py build
python setup.py install


8. Configure logging
--------------------

(1) Direct all psiphonv logs to psiphonv.log and turn off all VPN logging
(xl2tpd and pluto) that logs client IP addresses.
See: http://wiki.rsyslog.com/index.php/Filtering_by_program_name.

Add to /etc/rsyslog.conf (IMPORTANT: put new rules at the top of the rules section):

###############
#### RULES ####
###############

if $programname == 'psiphonv' then /var/log/psiphonv.log
if $programname == 'psiphonv' then ~
if $programname == 'xl2tpd' then /dev/null
if $programname == 'xl2tpd' then ~
if $programname == 'pluto' then /dev/null
if $programname == 'pluto' then ~

Enable RFC 3339 compatible high resolution timestamp logging format as required
for stats processing.

In /etc/rsyslog.conf, ensure this line is commented out:

    #$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

Restart rsyslogd:

  /etc/init.d/rsyslog restart

(2) Rotate psiphonv.log

Add to the weekly rotation (lower) section of /etc/logrotate.d/rsyslog:

  /var/log/psiphonv.log

(3) Make sure that rsync is installed

  apt-get install rsync

(4) (Optional) Create a user capable of collecting logs

  useradd -g adm -d /var/log <unique user name>

Add this user to the list of users in AllowUsers in /etc/ssh/sshd_config.

Note: it is a good idea to use a unique user name and a strong randomly
generated password for this user on each host.


9. Add host and servers to network database
-------------------------------------------

See the section below on Network Database Configuration.

- Add an entry for the host, including a name (Host_ID), IP address, SSH port,
and root-privilege SSH user credentials and host public key. This information is
used by the install and deploy script to connect to each host and upload
configuration information.

- Add an entry for each server on the host, including IP address, web server
port, discovery Client ID and discovery schedule.

- The install script will generate and fill in the web server secret, certificate
and private key.


10. Run psi_install.py
---------------------

On the build host:

  cd Automation
  python psi_install.py

The following subitems are performed by this script:


10.1 Configure IPSec
-------------------

We configure multiple connections, one per public IP address.

/etc/ipsec.conf:

  # /etc/ipsec.conf - Openswan IPsec configuration file

  version 2.0     # conforms to second version of ipsec.conf specification

  # basic configuration
  config setup
          interfaces=”ipsec0=eth0 <ipsec1=eth1 …>”
          # NAT-TRAVERSAL support, see README.NAT-Traversal
          nat_traversal=yes
          # exclude networks used on server side by adding %v4:!a.b.c.0/24
          virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12
          # OE is now off by default. Uncomment and change to on, to enable.
          oe=off
          # which IPsec stack to use. auto will try netkey, then klips then mast
          protostack=klips

  conn L2TP-PSK-<n>-NAT
          rightsubnet=vhost:%priv
          also=L2TP-PSK-<n>-noNAT

  conn L2TP-PSK-<n>-noNAT
          left=<server n IP address>
          leftprotoport=17/1701
          right=%any
          rightprotoport=17/0
          authby=secret
          pfs=no
          auto=add
          keyingtries=3
          rekey=no
          ikelifetime=8h
          keylife=1h
          type=transport

/etc/ipsec.secrets (chmod 666):

  <empty file>


10.2 Configure an instance of xl2tpd per external IP address
-----------------------------------------------------------

We run multiple xl2tpd instances, one per public IP address, due to an issue
described here:
https://lists.openswan.org/pipermail/users/2011-February/020143.html
(Monitor for a fix here: http://www.xelerance.com/wp-content/uploads/software/xl2tpd/CHANGES)

/etc/xl2tpd/xl2tpd<n>.conf:

  [global]
  listen-addr = <server IP address n>

  [lns default]
  ip range = 10.<n>.0.2-10.<n>.255.254
  local ip = 10.<n>.0.1
  require chap = yes
  refuse pap = yes
  require authentication = yes
  name = PsiphonV
  pppoptfile = /etc/ppp/options.xl2tpd
  length bit = yes

/etc/ppp/options.xl2tpd:

  ipcp-accept-local
  ipcp-accept-remote
  ms-dns 8.8.8.8
  ms-dns 8.8.4.4
  noccp
  auth
  crtscts
  idle 1800
  mtu 1410
  mru 1410
  nodefaultroute
  debug
  lock
  proxyarp
  connect-delay 5000

/etc/ppp/chap-secrets:

  *       *       password        *

/etc/init.d/xl2tpd:

  case "$1" in
    start)
          echo -n "Starting $DESC: "
          test -d /var/run/xl2tpd<n> || mkdir -p /var/run/xl2tpd<n>
          start-stop-daemon --start --quiet --pidfile $PIDFILE.<n> \
                  --exec $DAEMON -- -c /etc/xl2tpd/xl2tpd<n>.conf \
                  -p $PIDFILE.<n> -C /var/run/xl2tpd1/l2tp-control \
                  $DAEMON_OPTS
          echo "$NAME.<n>."
          ;;
    stop)
          echo -n "Stopping $DESC: "
          start-stop-daemon --oknodo --stop --quiet --pidfile $PIDFILE.<n> \
                  --exec $DAEMON
          echo "$NAME.<n>."
          ;;
    restart)
          $0 stop
          sleep 1
          $0 start
          ;;
   *)
          N=/etc/init.d/$NAME
          echo "Usage: $N {start|stop|restart}" >&2
          exit 1
          ;;
  esac


10.3 Restart L2TP/IPSec
----------------------

  /etc/init.d/ipsec restart
  /etc/init.d/xl2tpd restart


11. Invoke the deploy script
----------------------------

This script:

a. Uploads the latest web server source code and any additional source code and
generated configuration.

b. Uploads a subset of the database consisting of server info the host must be
prepared to issue for discovery; home page information; and server credentials.

c. Upload new client builds for automatic upgrade.


Network Database Configuration
--------------------------------------------------------------------------------

The network database schema and design is described in the design document.

The database is represented as a spreadsheet. There's an example spreadsheet
in the source tree here: Data/psi_db.xls. As this is a critical information
asset containing all authentication information for hosts and servers and
enumerating all IP addresses, in production this file is to be protected.

We recommend storing it in encrypted form only and mounting it temporarily
in a location accessible by the build/deploy host as required.

To override the default location of the database file/spreadsheet:

- Create a python source file:

  Automation/psi_data_config.py

- In this file, set DATA_ROOT to point to the directory containing the
real spreadsheet; also set the filename for the Authenticode code signing
certificate (still located under Data/CodeSigning); for example:

  DATA_ROOT = 'C:\MyPsiphonData'
  CODE_SIGNING_PACKAGE_FILENAME = 'MyAuthenticode.pfx'
